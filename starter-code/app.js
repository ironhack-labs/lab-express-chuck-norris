const express = require('express');
const eLayouts = require('express-ejs-layouts');
const bParser = require('body-parser');
const morgan = require('morgan');
const Chuck  = require('chucknorris-io');

const app = express(); //wasn't 100% what this does
const client = new Chuck(); //I could assume it runs the chuck norris joke creator

app.set('views', 'views'); //sets the views folder
app.set('view engine', 'ejs'); //sets the view engine to use ejs files, because of this you don't have to type main.ejs you could type main cause of this
app.set('layout', 'layouts/main.ejs'); //this is the template that all of the pages are going to follow.... or layout

app.use(morgan('dev')); //this puts the morgan middleware to dev mode to give us useful messages in the console
app.use(express.static('public')); //this is telling express where to find the static files... so the root directory for pics/css/js and stuff
app.use(eLayouts); //telling the app not to forget to actually use the layouts framework that was called up there
app.use(bParser.urlencoded({ extended: true })); //so these are some of the default settings of the body-parser, but in essence lets you send key value pairs from forms and other front end inputs to the backend without showing it in the url. (it's encoded)

// app.use((req, res, next) => {
//   console.log("this is the backend");
//   next();
// });

//render the home page when the person visits the / root directory
app.get('/', (req, res, next) => {
  res.render('chucks-home.ejs');

});

let theCategoryjoke = ""; //had some scope issues so decided to make this variable global
//bad Sherwin, don't do that ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^

//any other routes go below this ----------------------------------
//sorts the Chuck Norris jokes by category, should have a menu for users to select cat
app.get('/categories', (req, res, next) => {
    client.getJokeCategories().then((categoryChoices) => {
      console.log('getJokeCatergories()'); //just to show a title in the console
      console.log(categoryChoices); //this is the list of categories pulled from the api

      //this req.query.cat should be generated by user after they click on a category
      // it takes the request url query and grabs a key: value pair from it
      // in this case cat="whatevercategorytheuserclicked"
      // so if the request has a value run this block of code below
      if (req.query.cat !== undefined) {
         client.getRandomJoke(req.query.cat).then((jokeResult) => {
           console.log(jokeResult);
           //asign the joke as a variable so that I could pass it to the view
           theCategoryjoke = jokeResult.value;
           console.log(`var theCategoryjoke ---> ${theCategoryjoke}`);
        });
      }

    res.render('categories.ejs',
    //these are the variables that we are passing to the categories view page
    // so that it can render them
    { cat: categoryChoices,
      catJoke: theCategoryjoke });
    });
});

//generates a random Chuck Norris joke
app.get('/random', (req, res, next) => {
  client.getRandomJoke().then((jokeResult) => {
    console.log(jokeResult);

  res.render('random.ejs',
    { ranJoke: jokeResult.value });
  });
});

//lets you search for a chuck norris joke that contains a certain string
app.get('/search', (req, res, next) => {
  res.render('search.ejs',
  {searchJoke: "This is where the funny happens"});
});

app.post('/search', (req, res, next) => {
  client.search( req.body.jokeSearch ).then((results) => {
    console.log(`user searched for --> ${req.body.jokeSearch}`);
    console.log(results);

  res.render('search-res.ejs',
  { searchJoke: results.items });
  })
  .catch((error) => {
    console.log(`\nERROR!! search(${req.body.jokeSearch})`);
    console.log("Dude");

    res.render('search-res.ejs',
      { searchJoke2: [] });
  });
});


//about this Chuck Norris joke page
app.get('/about', (req, res, next) => {
  res.render('about.ejs');

});

//any forms or inputs that need to post go below this -----------------------
// app.post('/blah blah', (req, res, next) => {
//   res.render('blah blah.ejs');
//   //could put code here too
// });

app.listen(3000);
